package com.example.jhalloran.zoo.model.pen;

import static junit.framework.Assert.assertEquals;
import static junit.framework.Assert.assertFalse;
import static junit.framework.Assert.assertTrue;

import com.example.jhalloran.zoo.model.Zookeeper;
import com.example.jhalloran.zoo.model.animal.Animal;
import com.example.jhalloran.zoo.model.animal.FlyingAnimal;
import com.example.jhalloran.zoo.model.animal.LandAnimal;
import com.example.jhalloran.zoo.model.animal.SwimmingAnimal;
import com.example.jhalloran.zoo.model.shared.PenType;
import com.example.jhalloran.zoo.model.shared.WaterType;
import java.util.Collections;
import java.util.EnumSet;
import org.junit.Before;
import org.junit.Test;

/**
 * Created by jhalloran on 1/26/18.
 */
public final class PartWaterPartDryPenTest {
  private static final PenType DEFAULT_TYPE = PenType.PART_WATER_PART_DRY;
  private static final String DEFAULT_NAME = "Part Wet Part Dry";
  private static final int DEFAULT_LENGTH = 5;
  private static final int DEFAULT_WIDTH = 10;
  private static final int DEFAULT_TEMPERATURE = 22;
  private static final int DEFAULT_DEPTH = 8;
  private static final WaterType DEFAULT_WATER_TYPE = WaterType.SALT;

  private PartWaterPartDryPen pen = createDefaultPartWaterParDryPen();

  @Before
  public void setUp() {
    pen = createDefaultPartWaterParDryPen();
  }

  @Test
  public void createDryPenWithDefaults() {
    assertEquals(pen.getName(), DEFAULT_NAME);
    assertEquals(pen.getType(), DEFAULT_TYPE);
    assertEquals(pen.getLandArea(), 50);
    assertEquals(pen.getTemperature(), DEFAULT_TEMPERATURE + 5); // (22 + (22 + 10)) / 2 = 22 + 5
    assertEquals(pen.getWaterType(), DEFAULT_WATER_TYPE);
    assertEquals(pen.getWaterVolume(), 400);
  }

  @Test
  public void addAnimalToPen() {
    Animal seal =
        new SwimmingAnimal(
            "seal", false,10, 100, EnumSet.of(DEFAULT_WATER_TYPE), EnumSet.of(DEFAULT_TYPE));
    assertTrue(pen.addAnimal(seal));
    assertEquals(pen.getAnimals().size(), 1);
    assertTrue(pen.getAnimals().contains(seal));
  }

  @Test
  public void addAnimalThatIsTooLargeForWaterSection_throws() {
    Animal seaOtter =
        new SwimmingAnimal(
            "Sea Otter", false, 40, 500, EnumSet.of(DEFAULT_WATER_TYPE), EnumSet.of(DEFAULT_TYPE));

    assertFalse(pen.addAnimal(seaOtter));
    assertEquals(pen.getAnimals().size(), 0);
  }

  @Test
  public void addAnimalThatIsTooLargeForLandSection_throws() {
    Animal bullElephantSeal =
        new SwimmingAnimal(
            "Bull Elephant Seal",
            false,
            100,
            300,
            EnumSet.of(DEFAULT_WATER_TYPE),
            EnumSet.of(DEFAULT_TYPE));

    assertFalse(pen.addAnimal(bullElephantSeal));
    assertEquals(pen.getAnimals().size(), 0);
  }

  @Test
  public void addAnimalThatIsWrongTypeForPen_throws() {
    Animal seal =
        new SwimmingAnimal(
            "seal", false, 10, 100, EnumSet.of(DEFAULT_WATER_TYPE), EnumSet.of(PenType.AQUARIUM));

    assertFalse(pen.addAnimal(seal));
    assertEquals(pen.getAnimals().size(), 0);
  }

  @Test
  public void addLandAnimal_throws() {
    Animal dog = new LandAnimal("dog", 10, EnumSet.of(DEFAULT_TYPE), false);

    assertFalse(pen.addAnimal(dog));
    assertEquals(pen.getAnimals().size(), 0);
  }

  @Test
  public void addFlyingAnimal_throws() {
    FlyingAnimal bird = new FlyingAnimal("bird", false, 10, 200, EnumSet.of(DEFAULT_TYPE));

    assertFalse(pen.addAnimal(bird));
    assertEquals(pen.getAnimals().size(), 0);
  }

  @Test
  public void addAnimalofWrongWaterType_throws() {
    Animal cod =
        new SwimmingAnimal("cod", false, 0, 10, EnumSet.of(WaterType.FRESH), EnumSet.of(
            DEFAULT_TYPE));
    assertFalse(pen.addAnimal(cod));
    assertEquals(pen.getAnimals().size(), 0);
  }

  @Test
  public void removeAnimal() {
    Animal seal =
        new SwimmingAnimal(
            "seal", false,10, 100, EnumSet.of(DEFAULT_WATER_TYPE), EnumSet.of(DEFAULT_TYPE));
    Animal penguin =
        new SwimmingAnimal(
            "seal", false,10, 100, EnumSet.of(DEFAULT_WATER_TYPE), EnumSet.of(DEFAULT_TYPE));

    assertTrue(pen.addAnimal(seal));
    assertTrue(pen.addAnimal(penguin));

    assertTrue(pen.getAnimals().contains(seal));
    assertTrue(pen.getAnimals().contains(penguin));

    pen.removeAnimal(penguin);

    assertTrue(pen.getAnimals().contains(seal));
    assertEquals(pen.getAnimals().size(), 1);
  }

  @Test
  public void assignPenToZookeeper() {
    Zookeeper zookeeper = new Zookeeper("Jane", EnumSet.of(DEFAULT_TYPE));
    pen.assignToZookeeper(zookeeper);

    assertTrue(pen.isAssigned());
    assertEquals(pen.getAssignedToZookeeper(), zookeeper);
  }

  @Test
  public void assignPenToSecondZookeeper_updates() {
    Zookeeper zookeeperOne = new Zookeeper("Jane", EnumSet.of(DEFAULT_TYPE));
    Zookeeper zookeeperTwo = new Zookeeper("Fred", EnumSet.of(DEFAULT_TYPE));

    assertTrue(pen.assignToZookeeper(zookeeperOne));
    assertTrue(pen.assignToZookeeper(zookeeperTwo));

    assertEquals(pen.getAssignedToZookeeper(), zookeeperTwo);
    assertTrue(zookeeperTwo.getPens().contains(pen));
    assertFalse(zookeeperOne.getPens().contains(pen));
  }

  @Test
  public void addDangerousAnimalToPen() {
    Animal killerSeal =
        new SwimmingAnimal(
            "seal", true,10, 100, EnumSet.of(DEFAULT_WATER_TYPE), EnumSet.of(DEFAULT_TYPE));

    assertTrue(pen.addAnimal(killerSeal));
    assertEquals(pen.getAnimals().size(), 1);
  }

  @Test
  public void addDangerousAnimalToPenOccupiedBySafeAnimal_fails() {
    Animal killerSeal =
        new SwimmingAnimal(
            "seal", true, 10, 100, EnumSet.of(DEFAULT_WATER_TYPE), EnumSet.of(DEFAULT_TYPE));
    Animal penguin =
        new SwimmingAnimal(
            "seal", false,10, 100, EnumSet.of(DEFAULT_WATER_TYPE), EnumSet.of(DEFAULT_TYPE));


    assertTrue(pen.addAnimal(penguin));
    assertFalse(pen.addAnimal(killerSeal));
    assertEquals(pen.getAnimals(), Collections.singleton(penguin));
  }

  @Test
  public void addDangerousAnimalToPenOccupiedByDangerousAnimal_fails() {
    Animal killerSeal =
        new SwimmingAnimal(
            "seal", true, 10, 100, EnumSet.of(DEFAULT_WATER_TYPE), EnumSet.of(DEFAULT_TYPE));
    Animal polarBear =
        new SwimmingAnimal(
            "polar bear", true,10, 100, EnumSet.of(DEFAULT_WATER_TYPE), EnumSet.of(DEFAULT_TYPE));
    assertTrue(pen.addAnimal(killerSeal));
    assertFalse(pen.addAnimal(polarBear));
    assertEquals(pen.getAnimals(), Collections.singleton(killerSeal));
  }

  @Test
  public void addSafeAnimalToPenOccupiedByDangerousAnimal_fails() {
    Animal killerSeal =
        new SwimmingAnimal(
            "seal", true, 10, 100, EnumSet.of(DEFAULT_WATER_TYPE), EnumSet.of(DEFAULT_TYPE));
    Animal penguin =
        new SwimmingAnimal(
            "seal", false,10, 100, EnumSet.of(DEFAULT_WATER_TYPE), EnumSet.of(DEFAULT_TYPE));
    assertTrue(pen.addAnimal(killerSeal));
    assertFalse(pen.addAnimal(penguin));
    assertEquals(pen.getAnimals(), Collections.singleton(killerSeal));
  }

  private PartWaterPartDryPen createDefaultPartWaterParDryPen() {
    DryPen dryPen = new DryPen(DEFAULT_NAME, DEFAULT_LENGTH, DEFAULT_WIDTH, DEFAULT_TEMPERATURE);
    AquariumPen aquariumPen =
        new AquariumPen(
            DEFAULT_NAME,
            DEFAULT_WATER_TYPE,
            DEFAULT_DEPTH,
            DEFAULT_LENGTH,
            DEFAULT_WIDTH,
            DEFAULT_TEMPERATURE + 10);
    return new PartWaterPartDryPen(dryPen, aquariumPen);
  }
}
