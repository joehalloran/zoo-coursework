package com.example.jhalloran.zoo.model.pen;

import static junit.framework.Assert.assertEquals;
import static junit.framework.Assert.assertFalse;
import static junit.framework.Assert.assertTrue;
import static junit.framework.Assert.fail;

import com.example.jhalloran.zoo.model.Zookeeper;
import com.example.jhalloran.zoo.model.animal.Animal;
import com.example.jhalloran.zoo.model.animal.FlyingAnimal;
import com.example.jhalloran.zoo.model.animal.LandAnimal;
import com.example.jhalloran.zoo.model.animal.SwimmingAnimal;
import com.example.jhalloran.zoo.model.shared.PenType;
import com.example.jhalloran.zoo.model.shared.WaterType;
import java.util.Collections;
import java.util.EnumSet;
import org.junit.Before;
import org.junit.Test;

/**
 * Created by jhalloran on 1/9/18.
 */

public final class DryPenTest {
  private static final PenType DEFAULT_TYPE = PenType.DRY;
  private static final String DEFAULT_NAME = "Dry pen";
  private static final int DEFAULT_LENGTH = 5;
  private static final int DEFAULT_WIDTH = 10;
  private static final int DEFAULT_TEMPERATURE = 22;
  private static final String CAN_LIVE_HERE_ERROR_MESSAGE = "Animal not suitable for this pen";

  private DryPen dryPen = createDefaultDryPen();

  @Before
  public void setUp() {
    dryPen = createDefaultDryPen();
  }

  @Test
  public void createDryPenWithDefaults() {
    assertEquals(dryPen.getName(), DEFAULT_NAME);
    assertEquals(dryPen.getType(), DEFAULT_TYPE);
    assertEquals(dryPen.getLandArea(), 50);
    assertEquals(dryPen.getTemperature(), DEFAULT_TEMPERATURE);
  }

  @Test
  public void addAnimalToPen() {
    Animal cat = new LandAnimal("cat", 10, EnumSet.of(DEFAULT_TYPE));
    try {
      dryPen.addAnimal(cat);
    } catch (Exception e) {
      // Test - do nothing
    }

    assertEquals(dryPen.getAnimals(), Collections.singletonList(cat));
  }

  @Test
  public void addAnimalThatIsTooLargeForPen_throws() {
    DryPen smallPen = new DryPen(DEFAULT_NAME, 2, 2, DEFAULT_TEMPERATURE);
    Animal elephant = new LandAnimal("elephant", 50, EnumSet.of(DEFAULT_TYPE));

    try {
      smallPen.addAnimal(elephant);
      fail("Expected exception: Animal too large");
    } catch (Exception e) {
      assertEquals(e.getMessage(), CAN_LIVE_HERE_ERROR_MESSAGE);
    }
  }

  @Test
  public void addAnimalWithWrongPenType_throws() {
    Animal cat = new LandAnimal("cat", 50, EnumSet.of(PenType.PETTING));

    try {
      dryPen.addAnimal(cat);
      fail("Expected exception: Swimming animal");
    } catch (Exception e) {
      assertEquals(e.getMessage(), CAN_LIVE_HERE_ERROR_MESSAGE);
    }
  }

  @Test
  public void addFlyingAnimal_throws() {
    FlyingAnimal bird = new FlyingAnimal("bird", 10, 200, EnumSet.of(DEFAULT_TYPE));

    try {
      dryPen.addAnimal(bird);
      fail("Expected exception: Flying animal");
    } catch (Exception e) {
      assertEquals(e.getMessage(), CAN_LIVE_HERE_ERROR_MESSAGE);
    }
  }

  @Test
  public void addSwimmingAnimal_throws() {
    Animal seal =
        new SwimmingAnimal("seal", 10, 100, EnumSet.of(WaterType.FRESH), EnumSet.of(DEFAULT_TYPE));

    try {
      dryPen.addAnimal(seal);
      fail("Expected exception: Swimming animal");
    } catch (Exception e) {
      assertEquals(e.getMessage(), CAN_LIVE_HERE_ERROR_MESSAGE);
    }
  }

  @Test
  public void removeAnimal() {
    Animal cat = new LandAnimal("cat", 10, EnumSet.of(DEFAULT_TYPE));
    Animal dog = new LandAnimal("dog", 15, EnumSet.of(DEFAULT_TYPE));
    try {
      dryPen.addAnimal(cat);
      dryPen.addAnimal(dog);
    } catch (Exception e) {
      // Test - do nothing
    }

    assertTrue(dryPen.getAnimals().contains(cat));
    assertTrue(dryPen.getAnimals().contains(dog));

    dryPen.removeAnimal(cat);

    assertTrue(dryPen.getAnimals().contains(dog));
    assertEquals(dryPen.getAnimals().size(), 1);
  }

  @Test
  public void assignPenToZookeeper() {
    Zookeeper zookeeper = new Zookeeper("Jane", EnumSet.of(DEFAULT_TYPE));
    try {
      dryPen.assignToZookeeper(zookeeper);
    } catch (Exception e) {
      // Do nothing... test
    }
    assertTrue(dryPen.isAssigned());
    assertEquals(dryPen.getAssignedToZookeeper(), zookeeper);
  }

  @Test
  public void assignAnimalToSecondPen_updates() {
    Zookeeper zookeeperOne = new Zookeeper("Jane", EnumSet.of(DEFAULT_TYPE));
    Zookeeper zookeeperTwo = new Zookeeper("Fred", EnumSet.of(DEFAULT_TYPE));
    try {
      dryPen.assignToZookeeper(zookeeperOne);
      dryPen.assignToZookeeper(zookeeperTwo);
    } catch (Exception e) {
      // Do nothing... test
    }
    assertEquals(dryPen.getAssignedToZookeeper(), zookeeperTwo);
    assertTrue(zookeeperTwo.getPens().contains(dryPen));
    assertFalse(zookeeperOne.getPens().contains(dryPen));
  }

  @Test
  public void toString_returnType(){
    assertEquals(dryPen.toString(), DEFAULT_NAME);
  }

  private DryPen createDefaultDryPen() {
    return new DryPen(DEFAULT_NAME, DEFAULT_LENGTH, DEFAULT_WIDTH, DEFAULT_TEMPERATURE);
  }
}

