package com.example.jhalloran.zoo.model.pen;

import static junit.framework.Assert.assertEquals;
import static junit.framework.Assert.assertTrue;
import static junit.framework.Assert.fail;

import com.example.jhalloran.zoo.model.animal.Animal;
import com.example.jhalloran.zoo.model.animal.FlyingAnimal;
import com.example.jhalloran.zoo.model.animal.LandAnimal;
import com.example.jhalloran.zoo.model.animal.SwimmingAnimal;
import com.example.jhalloran.zoo.model.shared.PenType;
import com.example.jhalloran.zoo.model.shared.WaterType;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.List;
import org.junit.Before;
import org.junit.Test;

/**
 * Created by jhalloran on 1/9/18.
 */

public final class AquariumPenTest {
  private static final PenType DEFAULT_PEN_TYPE = PenType.AQUARIUM;
  private static final String DEFAULT_NAME = "Aquarium";
  private static final int DEFAULT_LENGTH = 5;
  private static final int DEFAULT_WIDTH = 10;
  private static final int DEFAULT_TEMPERATURE = 22;
  private static final int DEFAULT_DEPTH = 8;
  private static final WaterType DEFAULT_WATER_TYPE = WaterType.SALT;
  private static final String CAN_LIVE_HERE_ERROR_MESSAGE = "Animal not suitable for this pen";

  private AquariumPen aquarium = createDefaultAquarium();

  @Before
  public void setUp() {
    aquarium = createDefaultAquarium();
  }

  @Test
  public void createAquariumWithDefaults() {
    assertEquals(aquarium.getType(), DEFAULT_PEN_TYPE);
    assertEquals(aquarium.getWaterType(), DEFAULT_WATER_TYPE);
    assertEquals(aquarium.getWaterVolume(), 400);
  }

  @Test
  public void addAnimal() {
    Animal fish =
        new SwimmingAnimal(
            "fish", 0, 10, EnumSet.of(DEFAULT_WATER_TYPE), EnumSet.of(DEFAULT_PEN_TYPE));
    try {
      aquarium.addAnimal(fish);
    } catch (Exception e) {
      // Test - do nothing
    }

    List<Animal> expected = new ArrayList<>();
    expected.add(fish);
    assertEquals(aquarium.getAnimals(), expected);
  }

  @Test
  public void addAnimalThatIsTooLargeForPen_throws() {
    Animal whale =
        new SwimmingAnimal(
            "whale", 0, 500, EnumSet.of(DEFAULT_WATER_TYPE), EnumSet.of(DEFAULT_PEN_TYPE));
    try {
      aquarium.addAnimal(whale);
      fail("Expected exception: swimming animal too large");
    } catch (Exception e) {
      assertEquals(e.getMessage(), CAN_LIVE_HERE_ERROR_MESSAGE);
    }
  }

  @Test
  public void addAnimalThatNeedsLand_throws() {
    Animal seal =
        new SwimmingAnimal(
            "seal", 10, 100, EnumSet.of(DEFAULT_WATER_TYPE), EnumSet.of(DEFAULT_PEN_TYPE));
    try {
      aquarium.addAnimal(seal);
      fail("Expected exception: swimming animal too large");
    } catch (Exception e) {
      assertEquals(e.getMessage(), CAN_LIVE_HERE_ERROR_MESSAGE);
    }
  }

  @Test
  public void addAnimalWithWrongPenType_throws() {
    Animal dolphin =
        new SwimmingAnimal(
            "dolphin",
            0,
            100,
            EnumSet.of(DEFAULT_WATER_TYPE),
            EnumSet.of(PenType.PART_WATER_PART_DRY));
    try {
      aquarium.addAnimal(dolphin);
      fail("Expected exception: animal with wrong pen type");
    } catch (Exception e) {
      assertEquals(e.getMessage(), CAN_LIVE_HERE_ERROR_MESSAGE);
    }
  }

  @Test
  public void addLandAnimal_throws() {
    Animal dog = new LandAnimal("dog", 10, EnumSet.of(DEFAULT_PEN_TYPE));
    try {
      aquarium.addAnimal(dog);
      fail("Expected exception: Land animal");
    } catch (Exception e) {
      assertEquals(e.getMessage(), CAN_LIVE_HERE_ERROR_MESSAGE);
    }
  }

  @Test
  public void addFlyingAnimal_throws() {
    FlyingAnimal bird = new FlyingAnimal("bird", 10, 200, EnumSet.of(DEFAULT_PEN_TYPE));
    try {
      aquarium.addAnimal(bird);
      fail("Expected exception: Flying animal");
    } catch (Exception e) {
      assertEquals(e.getMessage(), CAN_LIVE_HERE_ERROR_MESSAGE);
    }
  }

  @Test
  public void addAnimalOfWrongWaterType_throws() {
    Animal cod =
        new SwimmingAnimal("cod", 0, 10, EnumSet.of(WaterType.FRESH), EnumSet.of(DEFAULT_PEN_TYPE));
    try {
      aquarium.addAnimal(cod);
      fail("Expected exception: wrong water type");
    } catch (Exception e) {
      assertEquals(e.getMessage(), CAN_LIVE_HERE_ERROR_MESSAGE);
    }
  }

  @Test
  public void removeAnimal() {
    Animal cod =
        new SwimmingAnimal(
            "fish", 0, 10, EnumSet.of(DEFAULT_WATER_TYPE), EnumSet.of(DEFAULT_PEN_TYPE));

    Animal snapper =
        new SwimmingAnimal(
            "fish", 0, 10, EnumSet.of(DEFAULT_WATER_TYPE), EnumSet.of(DEFAULT_PEN_TYPE));


    try {
      aquarium.addAnimal(cod);
      aquarium.addAnimal(snapper);
    } catch (Exception e) {
      // Test - do nothing
    }

    assertTrue(aquarium.getAnimals().contains(cod));
    assertTrue(aquarium.getAnimals().contains(snapper));

    aquarium.removeAnimal(snapper);

    assertTrue(aquarium.getAnimals().contains(cod));
    assertEquals(aquarium.getAnimals().size(), 1);
  }

  @Test
  public void toString_returnType(){
    assertEquals(aquarium.toString(), DEFAULT_NAME);
  }

  private AquariumPen createDefaultAquarium() {
    return new AquariumPen(
        DEFAULT_NAME, DEFAULT_WATER_TYPE, DEFAULT_LENGTH, DEFAULT_WIDTH, DEFAULT_DEPTH, DEFAULT_TEMPERATURE);
  }
}
