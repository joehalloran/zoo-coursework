package com.example.jhalloran.zoo.model.pen;

import static junit.framework.Assert.assertEquals;
import static junit.framework.Assert.assertFalse;
import static junit.framework.Assert.assertTrue;

import com.example.jhalloran.zoo.model.animal.Animal;
import com.example.jhalloran.zoo.model.animal.FlyingAnimal;
import com.example.jhalloran.zoo.model.animal.LandAnimal;
import com.example.jhalloran.zoo.model.animal.SwimmingAnimal;
import com.example.jhalloran.zoo.model.shared.PenType;
import com.example.jhalloran.zoo.model.shared.WaterType;
import java.util.Collections;
import java.util.EnumSet;
import org.junit.Before;
import org.junit.Test;

/**
 * Created by jhalloran on 1/9/18.
 */

public final class AquariumPenTest {
  private static final PenType DEFAULT_PEN_TYPE = PenType.AQUARIUM;
  private static final String DEFAULT_NAME = "Aquarium";
  private static final int DEFAULT_LENGTH = 5;
  private static final int DEFAULT_WIDTH = 10;
  private static final int DEFAULT_TEMPERATURE = 22;
  private static final int DEFAULT_DEPTH = 8;
  private static final WaterType DEFAULT_WATER_TYPE = WaterType.SALT;

  private AquariumPen pen = createDefaultAquarium();

  @Before
  public void setUp() {
    pen = createDefaultAquarium();
  }

  @Test
  public void createAquariumWithDefaults() {
    assertEquals(pen.getType(), DEFAULT_PEN_TYPE);
    assertEquals(pen.getWaterType(), DEFAULT_WATER_TYPE);
    assertEquals(pen.getWaterVolume(), 400);
  }

  @Test
  public void addAnimal() {
    Animal fish =
        new SwimmingAnimal(
            "fish", 0, 10, EnumSet.of(DEFAULT_WATER_TYPE), EnumSet.of(DEFAULT_PEN_TYPE));
    assertTrue(pen.addAnimal(fish));
    assertEquals(pen.getAnimals(), Collections.singleton(fish));
  }

  @Test
  public void addSameAnimalTwice_fails() {
    Animal fish =
        new SwimmingAnimal(
            "fish", 0, 10, EnumSet.of(DEFAULT_WATER_TYPE), EnumSet.of(DEFAULT_PEN_TYPE));
    assertTrue(pen.addAnimal(fish));
    assertFalse(pen.addAnimal(fish));
    assertEquals(pen.getAnimals().size(), 1);
  }

  @Test
  public void addAnimalThatIsTooLargeForPen_fails() {
    Animal whale =
        new SwimmingAnimal(
            "whale", 0, 500, EnumSet.of(DEFAULT_WATER_TYPE), EnumSet.of(DEFAULT_PEN_TYPE));
    assertFalse(pen.addAnimal(whale));
    assertEquals(pen.getAnimals().size(), 0);
  }

  @Test
  public void addAnimalThatNeedsLand_fails() {
    Animal seal =
        new SwimmingAnimal(
            "seal", 10, 100, EnumSet.of(DEFAULT_WATER_TYPE), EnumSet.of(DEFAULT_PEN_TYPE));
    assertFalse(pen.addAnimal(seal));
    assertEquals(pen.getAnimals().size(), 0);
  }

  @Test
  public void addAnimalWithWrongPenType_fails() {
    Animal dolphin =
        new SwimmingAnimal(
            "dolphin",
            0,
            100,
            EnumSet.of(DEFAULT_WATER_TYPE),
            EnumSet.of(PenType.PART_WATER_PART_DRY));
    assertFalse(pen.addAnimal(dolphin));
    assertEquals(pen.getAnimals().size(), 0);  }

  @Test
  public void addLandAnimal_fails() {
    Animal dog = new LandAnimal("dog", 10, EnumSet.of(DEFAULT_PEN_TYPE));
    assertFalse(pen.addAnimal(dog));
    assertEquals(pen.getAnimals().size(), 0);
  }

  @Test
  public void addFlyingAnimal_fails() {
    FlyingAnimal bird = new FlyingAnimal("bird", 10, 200, EnumSet.of(DEFAULT_PEN_TYPE));
    assertFalse(pen.addAnimal(bird));
    assertEquals(pen.getAnimals().size(), 0);
  }

  @Test
  public void addAnimalOfWrongWaterType_fails() {
    Animal cod =
        new SwimmingAnimal("cod", 0, 10, EnumSet.of(WaterType.FRESH), EnumSet.of(DEFAULT_PEN_TYPE));
    assertFalse(pen.addAnimal(cod));
    assertEquals(pen.getAnimals().size(), 0);
  }

  @Test
  public void removeAnimal() {
    Animal cod =
        new SwimmingAnimal(
            "fish", 0, 10, EnumSet.of(DEFAULT_WATER_TYPE), EnumSet.of(DEFAULT_PEN_TYPE));

    Animal snapper =
        new SwimmingAnimal(
            "fish", 0, 10, EnumSet.of(DEFAULT_WATER_TYPE), EnumSet.of(DEFAULT_PEN_TYPE));

    pen.addAnimal(cod);
    pen.addAnimal(snapper);

    assertTrue(pen.getAnimals().contains(cod));
    assertTrue(pen.getAnimals().contains(snapper));

    pen.removeAnimal(snapper);

    assertTrue(pen.getAnimals().contains(cod));
    assertEquals(pen.getAnimals().size(), 1);
  }

  @Test
  public void toString_returnType(){
    assertEquals(pen.toString(), DEFAULT_NAME);
  }

  private AquariumPen createDefaultAquarium() {
    return new AquariumPen(
        DEFAULT_NAME, DEFAULT_WATER_TYPE, DEFAULT_LENGTH, DEFAULT_WIDTH, DEFAULT_DEPTH, DEFAULT_TEMPERATURE);
  }
}
