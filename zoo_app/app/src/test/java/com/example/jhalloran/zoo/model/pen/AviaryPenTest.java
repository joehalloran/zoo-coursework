package com.example.jhalloran.zoo.model.pen;

import static junit.framework.Assert.assertEquals;
import static junit.framework.Assert.fail;

import com.example.jhalloran.zoo.model.animal.Animal;
import com.example.jhalloran.zoo.model.animal.FlyingAnimal;
import com.example.jhalloran.zoo.model.animal.LandAnimal;
import com.example.jhalloran.zoo.model.animal.SwimmingAnimal;
import com.example.jhalloran.zoo.model.shared.PenType;
import com.example.jhalloran.zoo.model.shared.WaterType;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.List;
import org.junit.Before;
import org.junit.Test;

/**
 * Created by jhalloran on 1/9/18.
 */

public final class AviaryPenTest {
  private static final PenType DEFAULT_TYPE = PenType.AVIARY;
  private static final int DEFAULT_LENGTH = 5;
  private static final int DEFAULT_WIDTH = 10;
  private static final int DEFAULT_HEIGHT = 7;
  private static final int DEFAULT_TEMPERATURE = 22;
  private static final String CAN_LIVE_HERE_ERROR_MESSAGE = "Animal not suitable for this pen";

  private AviaryPen pen =
      new AviaryPen(DEFAULT_LENGTH, DEFAULT_WIDTH, DEFAULT_HEIGHT, DEFAULT_TEMPERATURE);

  @Before
  public void setUp() {
    pen = new AviaryPen(DEFAULT_LENGTH, DEFAULT_WIDTH, DEFAULT_HEIGHT, DEFAULT_TEMPERATURE);
  }

  @Test
  public void createDryPenWithDefaults() {
    assertEquals(pen.getType(), DEFAULT_TYPE);
    assertEquals(pen.getLandArea(), 50); // 5 * 10
    assertEquals(pen.getAirVolume(), 350); // 5 * 10 * 7
    assertEquals(pen.getTemperature(), DEFAULT_TEMPERATURE);
  }

  @Test
  public void addAnimalToPen() {
    FlyingAnimal bird = new FlyingAnimal("bird", 10, 200, EnumSet.of(DEFAULT_TYPE));
    try {
      pen.addAnimal(bird);
    } catch (Exception e) {
      // Test - do nothing
    }

    List<FlyingAnimal> expected = new ArrayList<>();
    expected.add(bird);
    assertEquals(pen.getAnimals(), expected);
  }

  @Test
  public void addAnimalWithWrongPenType_throws() {
    FlyingAnimal owl = new FlyingAnimal("owl", 10, 200, EnumSet.of(PenType.PETTING));

    try {
      pen.addAnimal(owl);
      fail("Expected exception: Wrong pen type");
    } catch (Exception e) {
      assertEquals(e.getMessage(), CAN_LIVE_HERE_ERROR_MESSAGE);
    }
  }

  @Test
  public void addAnimalThatIsTooLargeForPen_throws() {
    FlyingAnimal eagle = new FlyingAnimal("eagle", 80, 400, EnumSet.of(DEFAULT_TYPE));

    try {
      pen.addAnimal(eagle);
      fail("Expected exception: Animal too larger");
    } catch (Exception e) {
      assertEquals(e.getMessage(), CAN_LIVE_HERE_ERROR_MESSAGE);
    }
  }

  @Test
  public void addLandAnimal_throws() {
    Animal dog = new LandAnimal("dog", 10, EnumSet.of(DEFAULT_TYPE));

    try {
      pen.addAnimal(dog);
      fail("Expected exception: Land animal");
    } catch (Exception e) {
      assertEquals(e.getMessage(), CAN_LIVE_HERE_ERROR_MESSAGE);
    }
  }

  @Test
  public void addSwimmingAnimal_throws() {
    Animal seal =
        new SwimmingAnimal("seal", 10, 100, EnumSet.of(WaterType.FRESH), EnumSet.of(DEFAULT_TYPE));

    try {
      pen.addAnimal(seal);
      fail("Expected exception: Swimming animal");
    } catch (Exception e) {
      assertEquals(e.getMessage(), CAN_LIVE_HERE_ERROR_MESSAGE);
    }
  }

  @Test
  public void toString_returnType(){
    assertEquals(pen.toString(), DEFAULT_TYPE.toString());
  }
}
