package com.example.jhalloran.zoo.model.pen;

import static junit.framework.Assert.assertEquals;
import static junit.framework.Assert.assertFalse;
import static junit.framework.Assert.assertTrue;

import com.example.jhalloran.zoo.model.animal.Animal;
import com.example.jhalloran.zoo.model.animal.FlyingAnimal;
import com.example.jhalloran.zoo.model.animal.LandAnimal;
import com.example.jhalloran.zoo.model.animal.SwimmingAnimal;
import com.example.jhalloran.zoo.model.shared.PenType;
import com.example.jhalloran.zoo.model.shared.WaterType;
import java.util.Collections;
import java.util.EnumSet;
import org.junit.Before;
import org.junit.Test;

/**
 * Created by jhalloran on 1/9/18.
 */

public final class AviaryPenTest {
  private static final PenType DEFAULT_TYPE = PenType.AVIARY;
  private static final String DEFAULT_NAME = "Aviary";
  private static final int DEFAULT_LENGTH = 5;
  private static final int DEFAULT_WIDTH = 10;
  private static final int DEFAULT_HEIGHT = 7;
  private static final int DEFAULT_TEMPERATURE = 22;

  private AviaryPen pen = createDefaultAviary();
  @Before
  public void setUp() {
    pen = createDefaultAviary();
  }

  @Test
  public void createDryPenWithDefaults() {
    assertEquals(pen.getName(), DEFAULT_NAME);
    assertEquals(pen.getType(), DEFAULT_TYPE);
    assertEquals(pen.getLandArea(), 50); // 5 * 10
    assertEquals(pen.getAirVolume(), 350); // 5 * 10 * 7
    assertEquals(pen.getTemperature(), DEFAULT_TEMPERATURE);
  }

  @Test
  public void addAnimalToPen() {
    FlyingAnimal bird = new FlyingAnimal("bird", false, 10, 200, EnumSet.of(DEFAULT_TYPE));
    assertTrue(pen.addAnimal(bird));
    assertEquals(pen.getAnimals(), Collections.singleton(bird));
  }

  @Test
  public void addSameAnimalTwice_fails() {
    FlyingAnimal bird = new FlyingAnimal("bird", false, 10, 200, EnumSet.of(DEFAULT_TYPE));
    assertTrue(pen.addAnimal(bird));
    assertFalse(pen.addAnimal(bird));
    assertEquals(pen.getAnimals().size(), 1);
  }

  @Test
  public void addAnimalWithWrongPenType_fails() {
    FlyingAnimal owl = new FlyingAnimal("owl", false, 10, 200, EnumSet.of(PenType.PETTING));
    assertFalse(pen.addAnimal(owl));
    assertEquals(pen.getAnimals().size(), 0);
  }

  @Test
  public void addAnimalThatIsTooLargeForPen_fails() {
    FlyingAnimal eagle = new FlyingAnimal("eagle", false, 80, 400, EnumSet.of(DEFAULT_TYPE));
    assertFalse(pen.addAnimal(eagle));
    assertEquals(pen.getAnimals().size(), 0);
  }

  @Test
  public void addLandAnimal_fails() {
    Animal dog = new LandAnimal("dog", 10, EnumSet.of(DEFAULT_TYPE),false);
    assertFalse(pen.addAnimal(dog));
    assertEquals(pen.getAnimals().size(), 0);
  }

  @Test
  public void addSwimmingAnimal_fails() {
    Animal seal =
        new SwimmingAnimal("seal", false, 10,  100, EnumSet.of(WaterType.FRESH), EnumSet.of(DEFAULT_TYPE));
    assertFalse(pen.addAnimal(seal));
    assertEquals(pen.getAnimals().size(), 0);
  }

  @Test
  public void removeAnimal() {
    FlyingAnimal eagle = new FlyingAnimal("bird", false, 10, 100, EnumSet.of(DEFAULT_TYPE));

    FlyingAnimal hawk = new FlyingAnimal("bird", false, 10, 100, EnumSet.of(DEFAULT_TYPE));

    pen.addAnimal(eagle);
    pen.addAnimal(hawk);

    assertTrue(pen.getAnimals().contains(eagle));
    assertTrue(pen.getAnimals().contains(hawk));

    pen.removeAnimal(hawk);

    assertTrue(pen.getAnimals().contains(eagle));
    assertEquals(pen.getAnimals().size(), 1);
  }

  @Test
  public void addDangerousAnimalToPen() {
    FlyingAnimal evilBird = new FlyingAnimal("bird", true, 10, 40, EnumSet.of(DEFAULT_TYPE));
    assertTrue(pen.addAnimal(evilBird));
    assertEquals(pen.getAnimals().size(), 1);
  }

  @Test
  public void addDangerousAnimalToPenOccupiedBySafeAnimal_fails() {
    FlyingAnimal bird = new FlyingAnimal("bird", false, 10, 40, EnumSet.of(DEFAULT_TYPE));
    FlyingAnimal evilBird = new FlyingAnimal("bird", true, 10, 40, EnumSet.of(DEFAULT_TYPE));
    assertTrue(pen.addAnimal(bird));
    assertFalse(pen.addAnimal(evilBird));
    assertEquals(pen.getAnimals(), Collections.singleton(bird));
  }

  @Test
  public void addDangerousAnimalToPenOccupiedByDangerousAnimal_fails() {
    FlyingAnimal dangerBird = new FlyingAnimal("bird", true, 10, 40, EnumSet.of(DEFAULT_TYPE));
    FlyingAnimal evilBird = new FlyingAnimal("bird", true, 10, 40, EnumSet.of(DEFAULT_TYPE));
    assertTrue(pen.addAnimal(dangerBird));
    assertFalse(pen.addAnimal(evilBird));
    assertEquals(pen.getAnimals(), Collections.singleton(dangerBird));
  }

  @Test
  public void addSafeAnimalToPenOccupiedByDangerousAnimal_fails() {
    FlyingAnimal bird = new FlyingAnimal("bird", false, 10, 40, EnumSet.of(DEFAULT_TYPE));
    FlyingAnimal evilBird = new FlyingAnimal("bird", true, 10, 40, EnumSet.of(DEFAULT_TYPE));
    assertTrue(pen.addAnimal(evilBird));
    assertFalse(pen.addAnimal(bird));
    assertEquals(pen.getAnimals(), Collections.singleton(evilBird));
  }

  @Test
  public void toString_returnType(){
    assertEquals(pen.toString(), DEFAULT_NAME);
  }

  private AviaryPen createDefaultAviary() {
    return new AviaryPen(DEFAULT_NAME, DEFAULT_LENGTH, DEFAULT_WIDTH, DEFAULT_HEIGHT, DEFAULT_TEMPERATURE);
  }
}
