package com.example.jhalloran.zoo.model.pen;

import static junit.framework.Assert.assertEquals;
import static junit.framework.Assert.assertFalse;
import static junit.framework.Assert.assertTrue;

import com.example.jhalloran.zoo.model.Zookeeper;
import com.example.jhalloran.zoo.model.animal.Animal;
import com.example.jhalloran.zoo.model.animal.FlyingAnimal;
import com.example.jhalloran.zoo.model.animal.LandAnimal;
import com.example.jhalloran.zoo.model.animal.SwimmingAnimal;
import com.example.jhalloran.zoo.model.shared.PenType;
import com.example.jhalloran.zoo.model.shared.WaterType;
import java.util.Collections;
import java.util.EnumSet;
import org.junit.Before;
import org.junit.Test;

/**
 * Created by jhalloran on 1/26/18.
 */
public class PettingPenTest {
  private static final PenType DEFAULT_TYPE = PenType.PETTING;
  private static final String DEFAULT_NAME = "Petting pen";
  private static final int DEFAULT_LENGTH = 5;
  private static final int DEFAULT_WIDTH = 10;
  private static final int DEFAULT_TEMPERATURE = 22;

  private PettingPen pen = createDefaultPettingPen();

  @Before
  public void setUp() {
    pen = createDefaultPettingPen();
  }

  @Test
  public void createPettingPenWithDefaults() {
    assertEquals(pen.getName(), DEFAULT_NAME);
    assertEquals(pen.getType(), DEFAULT_TYPE);
    assertEquals(pen.getLandArea(), 50); // 5 * 10
    assertEquals(pen.getTemperature(), DEFAULT_TEMPERATURE);
  }

  @Test
  public void addAnimalToPen() {
    Animal cat = new LandAnimal("cat", 10, EnumSet.of(DEFAULT_TYPE), false);
    assertTrue(pen.addAnimal(cat));
    assertEquals(pen.getAnimals(), Collections.singleton(cat));
  }

  @Test
  public void addSameAnimalTwice_fails() {
    Animal cat = new LandAnimal("cat", 10, EnumSet.of(DEFAULT_TYPE), false);
    assertTrue(pen.addAnimal(cat));
    assertFalse(pen.addAnimal(cat));
    assertEquals(pen.getAnimals().size(), 1);
  }

  @Test
  public void addAnimalThatIsTooLargeForPen_fails() {
    DryPen smallPen = new DryPen(DEFAULT_NAME, 2, 2, DEFAULT_TEMPERATURE);
    Animal elephant = new LandAnimal("elephant", 50, EnumSet.of(DEFAULT_TYPE), false);
    assertFalse(smallPen.addAnimal(elephant));
    assertEquals(smallPen.getAnimals().size(), 0);
  }

  @Test
  public void addAnimalWithWrongPenType_fails() {
    Animal cat = new LandAnimal("cat", 50, EnumSet.of(PenType.DRY), false);
    assertFalse(pen.addAnimal(cat));
    assertEquals(pen.getAnimals().size(), 0);
  }

  @Test
  public void addFlyingAnimal_fails() {
    FlyingAnimal bird = new FlyingAnimal("bird", false, 10, 200, EnumSet.of(DEFAULT_TYPE));
    assertFalse(pen.addAnimal(bird));
    assertEquals(pen.getAnimals().size(), 0);
  }

  @Test
  public void addSwimmingAnimal_fails() {
    Animal seal =
        new SwimmingAnimal("seal", false, 10, 100, EnumSet.of(WaterType.FRESH), EnumSet.of(DEFAULT_TYPE));
    assertFalse(pen.addAnimal(seal));
    assertEquals(pen.getAnimals().size(), 0);
  }

  @Test
  public void removeAnimal() {
    Animal cat = new LandAnimal("cat", 10, EnumSet.of(DEFAULT_TYPE), false);
    Animal dog = new LandAnimal("dog", 15, EnumSet.of(DEFAULT_TYPE), false);

    assertTrue(pen.addAnimal(cat));
    assertTrue(pen.addAnimal(dog));

    assertTrue(pen.getAnimals().contains(cat));
    assertTrue(pen.getAnimals().contains(dog));

    pen.removeAnimal(cat);

    assertTrue(pen.getAnimals().contains(dog));
    assertEquals(pen.getAnimals().size(), 1);
  }

  @Test
  public void assignPenToZookeeper() {
    Zookeeper zookeeper = new Zookeeper("Jane", EnumSet.of(DEFAULT_TYPE));
    pen.assignToZookeeper(zookeeper);

    assertTrue(pen.isAssigned());
    assertEquals(pen.getAssignedToZookeeper(), zookeeper);
  }

  @Test
  public void assignPenToSecondZookeeper_updates() {
    Zookeeper zookeeperOne = new Zookeeper("Jane", EnumSet.of(DEFAULT_TYPE));
    Zookeeper zookeeperTwo = new Zookeeper("Fred", EnumSet.of(DEFAULT_TYPE));

    assertTrue(pen.assignToZookeeper(zookeeperOne));
    assertTrue(pen.assignToZookeeper(zookeeperTwo));

    assertEquals(pen.getAssignedToZookeeper(), zookeeperTwo);
    assertTrue(zookeeperTwo.getPens().contains(pen));
    assertFalse(zookeeperOne.getPens().contains(pen));
  }

  @Test
  public void addDangerousAnimalToPen() {
    Animal cat = new LandAnimal("cat", 10, EnumSet.of(DEFAULT_TYPE), true);
    assertTrue(pen.addAnimal(cat));
    assertEquals(pen.getAnimals().size(), 1);
  }

  @Test
  public void addDangerousAnimalToPenOccupiedBySafeAnimal_fails() {
    Animal cat = new LandAnimal("cat", 10, EnumSet.of(DEFAULT_TYPE), false);
    Animal dangerCat = new LandAnimal("cat", 10, EnumSet.of(DEFAULT_TYPE), true);
    assertTrue(pen.addAnimal(cat));
    assertFalse(pen.addAnimal(dangerCat));
    assertEquals(pen.getAnimals(), Collections.singleton(cat));
  }

  @Test
  public void addDangerousAnimalToPenOccupiedByDangerousAnimal_fails() {
    Animal lion = new LandAnimal("cat", 10, EnumSet.of(DEFAULT_TYPE), true);
    Animal dangerCat = new LandAnimal("cat", 10, EnumSet.of(DEFAULT_TYPE), true);
    assertTrue(pen.addAnimal(lion));
    assertFalse(pen.addAnimal(dangerCat));
    assertEquals(pen.getAnimals(), Collections.singleton(lion));
  }

  @Test
  public void addSafeAnimalToPenOccupiedByDangerousAnimal_fails() {
    Animal lion = new LandAnimal("cat", 10, EnumSet.of(DEFAULT_TYPE), true);
    Animal cat = new LandAnimal("cat", 10, EnumSet.of(DEFAULT_TYPE), false);
    assertTrue(pen.addAnimal(lion));
    assertFalse(pen.addAnimal(cat));
    assertEquals(pen.getAnimals(), Collections.singleton(lion));
  }

  @Test
  public void toString_returnType(){
    assertEquals(pen.toString(), DEFAULT_NAME);
  }

  private PettingPen createDefaultPettingPen() {
    return new PettingPen(DEFAULT_NAME, DEFAULT_LENGTH, DEFAULT_WIDTH, DEFAULT_TEMPERATURE);
  }
}
